@page "/"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.Inputs
@using AutoDealerSphere.Shared.Models
@using System.ComponentModel.DataAnnotations

<div class="login-container">
    <div class="login-box">
        <h2 class="login-title">ログイン</h2>
        
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <div class="form">
                <div class="form-row">
                    <label>メールアドレス</label>
                    <SfTextBox @bind-Value="@loginModel.Email" Placeholder="メールアドレスを入力"></SfTextBox>
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>
                <div class="form-row">
                    <label>パスワード</label>
                    <SfTextBox @bind-Value="@loginModel.Password" Type="InputType.Password" Placeholder="パスワードを入力"></SfTextBox>
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
            </div>
        </EditForm>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }
        
        <div class="form-buttons">
            <SfButton CssClass="e-primary" OnClick="HandleLogin">ログイン</SfButton>
        </div>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
    }
    
    .login-box {
        width: 500px;
        padding: 40px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    
    .login-title {
        text-align: center;
        margin-bottom: 30px;
        color: #333;
    }
    
    .login-box .form {
        padding: 0;
    }
    
    .login-box .form-row {
        display: flex;
        flex-wrap: wrap;
        align-items: flex-start;
        margin-bottom: 1rem;
        gap: 4px;
    }
    
    .login-box .form-row label {
        width: 150px;
        margin-right: 10px;
        color: #333;
        line-height: 36px;
    }
    
    .login-box .form-row .e-input-group {
        flex: 1;
        max-width: 280px;
    }
    
    .login-box .form-row .validation-message {
        flex-basis: 100%;
        color: #dc3545;
        font-size: 0.9em;
        margin-top: 4px;
        margin-left: 160px;
    }
    
    .login-box .form-buttons {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 30px;
    }
    
    .login-box .form-buttons .e-btn {
        width: auto;
        min-width: 120px;
    }
    
    .error-message {
        color: #d32f2f;
        text-align: center;
        margin-top: 10px;
        font-size: 14px;
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = "";

    private class LoginModel
    {
        [Required(ErrorMessage = "メールアドレスを入力してください。")]
        public string Email { get; set; } = "";
        
        [Required(ErrorMessage = "パスワードを入力してください。")]
        public string Password { get; set; } = "";
    }

    private async Task HandleLogin()
    {
        try
        {
            errorMessage = "";
            
            var loginRequest = new LoginRequest 
            { 
                Email = loginModel.Email, 
                Password = loginModel.Password 
            };
            
            var response = await Http.PostAsJsonAsync<LoginRequest>("api/User/login", loginRequest);
            var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();
            
            if (loginResponse != null && loginResponse.Success)
            {
                // ログイン成功 - 顧客一覧へ遷移
                NavigationManager.NavigateTo("/clientlist");
            }
            else
            {
                errorMessage = loginResponse?.ErrorMessage ?? "ログインに失敗しました。";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "ログイン処理中にエラーが発生しました。";
        }
    }
}