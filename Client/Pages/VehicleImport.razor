@page "/vehicle-import"
@layout MainLayout
@using System.Net.Http.Headers
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@inject HttpClient Http
@inject NavigationManager Navigation

<SfBreadcrumb>
    <BreadcrumbItems>
        <BreadcrumbItem IconCss="e-icons e-home" Url="/" />
        <BreadcrumbItem Text="車両データインポート" Url="/vehicle-import" />
    </BreadcrumbItems>
</SfBreadcrumb>

<h2>車両データインポート</h2>
<h3>CSVファイルからのデータ取込</h3>

<div class="row">
    <div class="col-md-8">
        <SfCard>
            <CardHeader Title="ファイル選択" />
            <CardContent>
                <p>CSVまたはTXTファイルから顧客情報と車両データをインポートします。</p>
                
                <div class="mb-4">
                    <label class="form-label fw-bold">インポートファイルを選択してください</label>
                    <InputFile OnChange="@OnFileSelected" accept=".csv,.txt" class="form-control" />
                </div>

                @if (!string.IsNullOrEmpty(selectedFileName))
                {
                    <div class="alert alert-info d-flex align-items-center">
                        <span class="e-icons e-file me-2"></span>
                        <span>選択されたファイル: <strong>@selectedFileName</strong></span>
                    </div>
                }

                <br />
                
                <div style="text-align: center;">
                    <SfButton IsPrimary="true" IconCss="e-icons e-upload" 
                             Disabled="@(isImporting || selectedFile == null)"
                             OnClick="ImportFile">
                        @if (isImporting)
                        {
                            <span>インポート中...</span>
                        }
                        else
                        {
                            <span>インポート開始</span>
                        }
                    </SfButton>
                    <SfButton CssClass="ms-2" OnClick="Cancel">キャンセル</SfButton>
                </div>
            </CardContent>
        </SfCard>

        @if (importResult != null)
        {
            <SfCard CssClass="mt-4">
                <CardHeader Title="インポート結果" />
                <CardContent>
                    <div class="@(importResult.Success ? "text-success" : "text-danger")">
                        <h5 class="mb-3">
                            <span class="e-icons @(importResult.Success ? "e-check" : "e-close") me-2"></span>
                            @importResult.Message
                        </h5>
                    </div>
                    
                    @if (importResult.ClientsImported > 0 || importResult.VehiclesImported > 0)
                    {
                        <div class="row mb-3">
                            <div class="col-6">
                                <div class="p-3 border rounded bg-light">
                                    <h6 class="text-primary">新規顧客</h6>
                                    <h3 class="mb-0">@importResult.ClientsImported 件</h3>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="p-3 border rounded bg-light">
                                    <h6 class="text-success">車両データ</h6>
                                    <h3 class="mb-0">@importResult.VehiclesImported 件</h3>
                                </div>
                            </div>
                        </div>
                    }
                    
                    @if (importResult.Errors?.Any() == true)
                    {
                        <div class="alert alert-warning">
                            <h6 class="alert-heading">エラー詳細:</h6>
                            <ul class="mb-0">
                                @foreach (var error in importResult.Errors.Take(10))
                                {
                                    <li>@error</li>
                                }
                                @if (importResult.Errors.Count > 10)
                                {
                                    <li><em>...他 @(importResult.Errors.Count - 10) 件のエラー</em></li>
                                }
                            </ul>
                        </div>
                    }
                </CardContent>
            </SfCard>
        }
    </div>

    <div class="col-md-4">
        <SfCard>
            <CardHeader Title="インポートファイルの形式" />
            <CardContent>
                <p class="text-muted">以下のカラムを含むCSVまたはTXTファイルを準備してください：</p>
                <table class="table table-sm">
                    <tbody>
                        <tr>
                            <td><strong>fld_顧客ID</strong></td>
                            <td class="text-muted">顧客を識別する一意のID</td>
                        </tr>
                        <tr>
                            <td><strong>fld_氏名</strong></td>
                            <td class="text-muted">顧客の氏名</td>
                        </tr>
                        <tr>
                            <td><strong>fld_郵便番号</strong></td>
                            <td class="text-muted">顧客の郵便番号</td>
                        </tr>
                        <tr>
                            <td><strong>fld_所有者の住所</strong></td>
                            <td class="text-muted">顧客の住所</td>
                        </tr>
                        <tr>
                            <td colspan="2" class="text-muted">
                                <small>その他の車両情報カラム（車両番号、車体番号、車検証情報など）</small>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </CardContent>
        </SfCard>
    </div>
</div>

@code {
    private IBrowserFile? selectedFile;
    private string selectedFileName = string.Empty;
    private bool isImporting = false;
    private ImportResult? importResult;

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        selectedFileName = e.File.Name;
        importResult = null;
    }

    private async Task ImportFile()
    {
        if (selectedFile == null) return;

        isImporting = true;
        importResult = null;

        try
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)); // 10MB max
            fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            content.Add(fileContent, "file", selectedFile.Name);

            var response = await Http.PostAsync("api/VehicleImport/upload", content);
            
            if (response.IsSuccessStatusCode)
            {
                importResult = await response.Content.ReadFromJsonAsync<ImportResult>();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                importResult = new ImportResult
                {
                    Success = false,
                    Message = $"インポートに失敗しました: {response.StatusCode}",
                    Errors = new List<string> { errorContent }
                };
            }
        }
        catch (Exception ex)
        {
            importResult = new ImportResult
            {
                Success = false,
                Message = "インポート中にエラーが発生しました",
                Errors = new List<string> { ex.Message }
            };
        }
        finally
        {
            isImporting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    private class ImportResult
    {
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
        public int ClientsImported { get; set; }
        public int VehiclesImported { get; set; }
        public List<string> Errors { get; set; } = new();
    }
}